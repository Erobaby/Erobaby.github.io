<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erobaby的博客</title>
  <subtitle>一个欢乐的搬砖工</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://erobaby.me/"/>
  <updated>2016-05-23T15:30:33.000Z</updated>
  <id>http://erobaby.me/</id>
  
  <author>
    <name>Erobaby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nothing</title>
    <link href="http://erobaby.me/2016/05/23/Nothing/"/>
    <id>http://erobaby.me/2016/05/23/Nothing/</id>
    <published>2016-05-23T15:29:06.000Z</published>
    <updated>2016-05-23T15:30:33.000Z</updated>
    
    <content type="html">&lt;p&gt;Null&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Null&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NPM入门教程</title>
    <link href="http://erobaby.me/2016/05/22/NPM%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://erobaby.me/2016/05/22/NPM入门教程/</id>
    <published>2016-05-22T15:47:40.000Z</published>
    <updated>2016-05-23T14:59:43.000Z</updated>
    
    <content type="html">&lt;p&gt;NPM作为Node的模块管理和发布工具，作用与Ruby的gem、Python的pypl或setuptools、PHP的pear和.Net的Nuget一样。在当前前端工程化极速狂奔的年代，即使不做nodejs的开发，也需要学习和使用NPM的，谁叫grunt、bower、yeoman这一堆的工具都通过NPM发布呢？&lt;/p&gt;
&lt;p&gt;本文为针对非nodejs的开发者整理的NPM使用说明。当然最好的教程还是&lt;a href=&quot;https://docs.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是包&quot;&gt;&lt;a href=&quot;#什么是包&quot; class=&quot;headerlink&quot; title=&quot;什么是包&quot;&gt;&lt;/a&gt;什么是包&lt;/h3&gt;&lt;p&gt;odejs以包的形式组织程序模块，而包的定义却十分简单——包含文件内容符合规范package.json文件的目录或归档文件。并通过&lt;package-name&gt;@&lt;version&gt;来唯一标识每个包。&lt;/version&gt;&lt;/package-name&gt;&lt;/p&gt;
&lt;h3 id=&quot;灵魂-package-json&quot;&gt;&lt;a href=&quot;#灵魂-package-json&quot; class=&quot;headerlink&quot; title=&quot;灵魂 package.json&quot;&gt;&lt;/a&gt;灵魂 package.json&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://images.cnitblog.com/blog/347002/201412/231712452182038.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;包的定义和NPM都围绕着package.json文件做文章，package.json文件其实就相当于JAVA中的MANIFEST.MF文件，用于存放模块的名称、版本、作者、机构、模块入口、依赖项等信息。首先我们通过&lt;code&gt;npm init&lt;/code&gt;命令在当前工作目录下以用户引导的方式创建一个全新的package.json文件。然后通过&lt;code&gt;npm help json&lt;/code&gt;命令打开帮助文档，并根据实际的项目需求自行初始化package.json的项目即可。下面将对基础配置项进行叙述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;，必选项，表示模块名称。命名时不能包含js、node、和url中需要转义的字符，不能以.和_为开头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt;，必选项，表示模块的版本号。版本号以&lt;code&gt;主版本号(Major).副版本号(Minor).补丁版本号(Patch)&lt;/code&gt;构成（如1.2.0）。而engines、dependencies和devDependencies等配置项中可使用语义化版本号语法，具体如下：&lt;br&gt;注意：版本号格式不对的话，在执行npm install时会报警告哦！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.1.1&lt;/strong&gt;：精确下载安装1.1.1版本的包&lt;br&gt;&lt;strong&gt;&amp;gt;、&amp;lt;=、&amp;gt;、&amp;gt;=1.1.1&lt;/strong&gt;：分别表示下载安装大于、小于等于、大于等于1.1.1版本的包&lt;br&gt;&lt;strong&gt;1.0.1-1.1.1&lt;/strong&gt;：表示版本范围是包含1.0.1到1.1.1版本的包&lt;br&gt;&lt;strong&gt;~1.1.1&lt;/strong&gt;：表示尽量采用靠近1.1.1版本的包，但可用的包版本范围是1.1.1-0到1.1.x-x版本的包&lt;br&gt;&lt;strong&gt;~1.1&lt;/strong&gt;：表示下载安装1.1.x-x版本的包&lt;br&gt;&lt;strong&gt;~1&lt;/strong&gt;：表示下载安装1.x.x-x版本的包&lt;br&gt;&lt;strong&gt;^1.1.1&lt;/strong&gt;：表示包版本范围是1.1.1到1.x.x-x&lt;br&gt;&lt;strong&gt;^0.1.1&lt;/strong&gt;：表示包版本范围是1.1.1到1.1.x-x&lt;br&gt;&lt;strong&gt;^1.1&lt;/strong&gt;：表示包版本范围是1.1.x-x到1.x.x-x&lt;br&gt;&lt;strong&gt;^1&lt;/strong&gt;：表示包版本范围是1.x.x-x&lt;br&gt;&lt;strong&gt;空格、x、*&lt;/strong&gt;：表示任意版本即可&lt;br&gt;两个版本选择器间，空格表示and关系，||表示or关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;main&lt;/strong&gt;，必选项，模块入口文件相对路径（相对于模块根目录）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; description&lt;/strong&gt;，可选项，表示模块功能描述，显示在&lt;code&gt;npm search &amp;lt;package-name&amp;gt;&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;keywords&lt;/strong&gt;，可选项，数组类型，表示模块的关键字，显示在&lt;code&gt;npm search &amp;lt;package-name&amp;gt;&lt;/code&gt;中&lt;br&gt;&lt;strong&gt;author&lt;/strong&gt;，可选项，表示发起者信息。示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;author&amp;quot;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;name&amp;quot;: &amp;quot;fsjohnhuang&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;url&amp;quot;: &amp;quot;http://fsjohnhuang.cnblogs.com/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;engines&lt;/strong&gt;，可选项，依赖的node版本。示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;engines&amp;quot;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;node&amp;quot;: &amp;quot;&amp;gt;= 0.8.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;repository&lt;/strong&gt;，可选项，源码托管地址。示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;repository&amp;quot;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/fsjohnhuang/iPromise.git&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;scripts&lt;/strong&gt;，可选项，自定义在cli中输入npm 时实际执行的程序。npm默认提供大量的script供我们调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dependencies&lt;/strong&gt;和&lt;strong&gt;devDependencies&lt;/strong&gt;，可选项，用于配置模块的生产环境依赖包和开发环境依赖包。当执行npm install时，npm会根据这两个配置项的值去下载安装相关的依赖包。两者的区别是devDependencies是模块开发过程的依赖包（如：grunt只在开发时有用的模块），并且当其他模块需要依赖当前模块时，当通过npm install &lt;package-name&gt;时会自动下载安装dependencies的包而不会下载devDependencies的包。&lt;/package-name&gt;&lt;/p&gt;
&lt;h3 id=&quot;NPM的配置信息&quot;&gt;&lt;a href=&quot;#NPM的配置信息&quot; class=&quot;headerlink&quot; title=&quot;NPM的配置信息&quot;&gt;&lt;/a&gt;NPM的配置信息&lt;/h3&gt;&lt;p&gt;现在我们对package.json有一定的了解了，现在就到理论+实践时间咯。在实践之前我们要先配置一下NPM的资源库（国内被墙，你懂的），内网用户还要配置一下网络代理地址等信息。&lt;/p&gt;
&lt;p&gt;查看部分配置信息——&lt;code&gt;npm config ls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看所有配置信息——&lt;code&gt;npm config ls -l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改配置信息的三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改用户家目录的.npmrc文件（没有则新建一个）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;npm config set &amp;lt;config&amp;gt; &amp;lt;config-value&amp;gt;&lt;/code&gt;命令；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;npm config set registry http://registry.npm.taobao.org/&lt;/code&gt;&lt;br&gt;&lt;code&gt;npm config set proxy http://proxy.com:8081/&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过–registry=&lt;registry-uri&gt;等命令可选项临时配置。&lt;/registry-uri&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;npm install grunt --registry=http://registry.npm.taobao.org&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;查找、安装-卸载、更新依赖包&quot;&gt;&lt;a href=&quot;#查找、安装-卸载、更新依赖包&quot; class=&quot;headerlink&quot; title=&quot;查找、安装/卸载、更新依赖包&quot;&gt;&lt;/a&gt;查找、安装/卸载、更新依赖包&lt;/h3&gt;&lt;p&gt;在安心玩耍之前我们要先了解一件事件，就是包的作用范围分为 &lt;strong&gt;全局&lt;/strong&gt; 和 &lt;strong&gt;本地&lt;/strong&gt; 两种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全局&lt;/strong&gt;：用作在cli上直接调用，而无法在项目中通过require导入依赖包。如将grunt-cli安装到全局时，则可在cli中输入grunt调用了！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install -g grunt-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;cmd或shell中直接调用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grunt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地&lt;/strong&gt;：用作在项目中通过require导入依赖包，供项目使用。&lt;/p&gt;
&lt;p&gt;那么全局和本地的依赖包到底是存放在哪里的呢？通过&lt;code&gt;npm root -g&lt;/code&gt;和&lt;code&gt;npm root&lt;/code&gt;可分别查看全局和本地的依赖包下载安装的绝对目录了。本地的依赖包会存放在当前项目根目录下的node_modules目录下。&lt;/p&gt;
&lt;p&gt;现在我们可以正式操作依赖包了！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搜索阶段（操作远程资源库中的依赖包）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;搜索依赖包，&lt;code&gt;npm search&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看依赖包的package.json信息，&lt;code&gt;npm view &amp;lt;package-name&amp;gt;&lt;/code&gt;。另外我们可以单独查看package.json某个配置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看包的依赖关系：&lt;code&gt;npm view &amp;lt;package-name&amp;gt; dependencies&lt;/code&gt;&lt;br&gt;查看包的源文件地址：&lt;code&gt;npm view &amp;lt;package-name&amp;gt; repository.url&lt;/code&gt;&lt;br&gt;查看包所依赖的node版本号：&lt;code&gt;npm view &amp;lt;package-name&amp;gt; engines&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;查看本地包信息&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看当前项目的本地依赖包，&lt;code&gt;npm list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看全局依赖包，&lt;code&gt;npm list -g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看本地依赖包是否不是最新版，&lt;code&gt;npm outdated &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;安装/卸载，更新包&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装本地/全局依赖包，&lt;code&gt;npm install &amp;lt;package-name&amp;gt; / npm install -g &amp;lt;package-name&amp;gt;&lt;/code&gt;（这样会下载安装最新的包，若下载安装特定版本号的包则&lt;code&gt;npm install &amp;lt;package-name&amp;gt;@&amp;lt;version&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;卸载本地/全局依赖包，&lt;code&gt;npm uninstall &amp;lt;package-name&amp;gt; / npm uninstall -g &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新本地/全局依赖包，&lt;code&gt;npm update &amp;lt;package-name&amp;gt; / npm update -g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;发布包&quot;&gt;&lt;a href=&quot;#发布包&quot; class=&quot;headerlink&quot; title=&quot;发布包&quot;&gt;&lt;/a&gt;发布包&lt;/h3&gt;&lt;p&gt;站在使用者的角度，掌握上述章节的内容已经足够了，但当我们开发出好玩的项目而且又想和大家分享时，那么下面的内容就不得不了解了！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册一个registry帐号，&lt;code&gt;npm adduser&lt;/code&gt;，然后根据引导输入帐号、密码和邮箱地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录registry帐号，&lt;code&gt;npm login&lt;/code&gt; ，登录信息会保存在客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发布项目，&lt;code&gt;npm publish&lt;/code&gt; 。（建议发布版本从1.0.0开始）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过上述步骤我们就可发布模块了。但这个时候你也许会考虑到项目中部分目录和文件不应该被发布出去，应该有一个像.gitignore的文件来配置这些排除项。看来你猜对了，那就是.npmignore文件，不过npm做得更灵活一些！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;默认不带.npmignore文件，若项目中带.gitignore则使用.gitignore文件内容的配置项；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若带.npmignore文件则不使用.gitignore文件中的配置项；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;即使配置.npmignore文件，也无法排除package.json和README.* 文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NPM内置设定以下文件必须被排除&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.swp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.DS_Store&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.hg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.lock-wscript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.svn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.wafpickle-*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CVS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm-debug.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://www.cnblogs.com/fsjohnhuang/p/4178019.html&quot; title=&quot;view: Node魔法堂：NPM那个入门&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/fsjohnhuang/p/4178019.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;NPM作为Node的模块管理和发布工具，作用与Ruby的gem、Python的pypl或setuptools、PHP的pear和.Net的Nuget一样。在当前前端工程化极速狂奔的年代，即使不做nodejs的开发，也需要学习和使用NPM的，谁叫grunt、bower、yeoman这一堆的工具都通过NPM发布呢？&lt;/p&gt;
&lt;p&gt;本文为针对非nodejs的开发者整理的NPM使用说明。当然最好的教程还是&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;官方文档&lt;/a&gt;！&lt;br&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://erobaby.me/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>寄生兽</title>
    <link href="http://erobaby.me/2016/05/22/%E5%AF%84%E7%94%9F%E5%85%BD/"/>
    <id>http://erobaby.me/2016/05/22/寄生兽/</id>
    <published>2016-05-22T09:25:21.000Z</published>
    <updated>2016-05-23T15:04:17.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;人类保护动物是害怕孤独&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保护环境是不想自我毁灭&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寄生于地球的人类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要的或许真的是天敌吧&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://o7kir08j3.bkt.clouddn.com/16-5-22/92465300.jpg&quot; alt=&quot;寄生兽&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;人类保护动物是害怕孤独&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保护环境是不想自我毁灭&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="动漫" scheme="http://erobaby.me/tags/%E5%8A%A8%E6%BC%AB/"/>
    
      <category term="随笔" scheme="http://erobaby.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
